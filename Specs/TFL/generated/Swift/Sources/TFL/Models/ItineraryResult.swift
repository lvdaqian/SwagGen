//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

/** A DTO representing a list of possible journeys. */
public class ItineraryResult: JSONDecodable, JSONEncodable, PrettyPrintable {

    public var cycleHireDockingStationData: JourneyPlannerCycleHireDockingStationData?

    public var journeyVector: JourneyVector?

    public var journeys: [Journey]?

    public var lines: [Line]?

    public var recommendedMaxAgeMinutes: Int?

    public var searchCriteria: SearchCriteria?

    public var stopMessages: [String]?

    public init(cycleHireDockingStationData: JourneyPlannerCycleHireDockingStationData? = nil, journeyVector: JourneyVector? = nil, journeys: [Journey]? = nil, lines: [Line]? = nil, recommendedMaxAgeMinutes: Int? = nil, searchCriteria: SearchCriteria? = nil, stopMessages: [String]? = nil) {
        self.cycleHireDockingStationData = cycleHireDockingStationData
        self.journeyVector = journeyVector
        self.journeys = journeys
        self.lines = lines
        self.recommendedMaxAgeMinutes = recommendedMaxAgeMinutes
        self.searchCriteria = searchCriteria
        self.stopMessages = stopMessages
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        cycleHireDockingStationData = jsonDictionary.json(atKeyPath: "cycleHireDockingStationData")
        journeyVector = jsonDictionary.json(atKeyPath: "journeyVector")
        journeys = jsonDictionary.json(atKeyPath: "journeys")
        lines = jsonDictionary.json(atKeyPath: "lines")
        recommendedMaxAgeMinutes = jsonDictionary.json(atKeyPath: "recommendedMaxAgeMinutes")
        searchCriteria = jsonDictionary.json(atKeyPath: "searchCriteria")
        stopMessages = jsonDictionary.json(atKeyPath: "stopMessages")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        if let cycleHireDockingStationData = cycleHireDockingStationData?.encode() {
            dictionary["cycleHireDockingStationData"] = cycleHireDockingStationData
        }
        if let journeyVector = journeyVector?.encode() {
            dictionary["journeyVector"] = journeyVector
        }
        if let journeys = journeys?.encode() {
            dictionary["journeys"] = journeys
        }
        if let lines = lines?.encode() {
            dictionary["lines"] = lines
        }
        if let recommendedMaxAgeMinutes = recommendedMaxAgeMinutes {
            dictionary["recommendedMaxAgeMinutes"] = recommendedMaxAgeMinutes
        }
        if let searchCriteria = searchCriteria?.encode() {
            dictionary["searchCriteria"] = searchCriteria
        }
        if let stopMessages = stopMessages {
            dictionary["stopMessages"] = stopMessages
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
