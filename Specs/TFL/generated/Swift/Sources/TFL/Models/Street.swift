//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class Street: JSONDecodable, JSONEncodable, PrettyPrintable {

    /** Type of road closure. Some example values:
            Open = road is open, not blocked, not closed, not restricted. It maybe that the disruption has been moved out of the carriageway.
            Partial Closure = road is partially blocked, closed or restricted. 
            Full Closure = road is fully blocked or closed. */
    public var closure: String?

    /** The direction of the disruption on the street. Some example values:
            All Directions
            All Approaches
            Clockwise
            Anti-Clockwise
            Northbound
            Eastbound
            Southbound
            Westbound
            Both Directions */
    public var directions: String?

    /** Street name */
    public var name: String?

    /** Geographic description of the sections of this street that are affected. */
    public var segments: [StreetSegment]?

    /** The ID from the source system of the disruption that this street belongs to. */
    public var sourceSystemId: Int?

    /** The key of the source system of the disruption that this street belongs to. */
    public var sourceSystemKey: String?

    public init(closure: String? = nil, directions: String? = nil, name: String? = nil, segments: [StreetSegment]? = nil, sourceSystemId: Int? = nil, sourceSystemKey: String? = nil) {
        self.closure = closure
        self.directions = directions
        self.name = name
        self.segments = segments
        self.sourceSystemId = sourceSystemId
        self.sourceSystemKey = sourceSystemKey
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        closure = jsonDictionary.json(atKeyPath: "closure")
        directions = jsonDictionary.json(atKeyPath: "directions")
        name = jsonDictionary.json(atKeyPath: "name")
        segments = jsonDictionary.json(atKeyPath: "segments")
        sourceSystemId = jsonDictionary.json(atKeyPath: "sourceSystemId")
        sourceSystemKey = jsonDictionary.json(atKeyPath: "sourceSystemKey")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        if let closure = closure {
            dictionary["closure"] = closure
        }
        if let directions = directions {
            dictionary["directions"] = directions
        }
        if let name = name {
            dictionary["name"] = name
        }
        if let segments = segments?.encode() {
            dictionary["segments"] = segments
        }
        if let sourceSystemId = sourceSystemId {
            dictionary["sourceSystemId"] = sourceSystemId
        }
        if let sourceSystemKey = sourceSystemKey {
            dictionary["sourceSystemKey"] = sourceSystemKey
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
