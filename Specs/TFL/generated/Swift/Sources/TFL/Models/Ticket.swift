//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class Ticket: JSONDecodable, JSONEncodable, PrettyPrintable {

    public var cost: String?

    public var description: String?

    public var displayOrder: Int?

    public var messages: [Message]?

    public var mode: String?

    public var passengerType: String?

    public var ticketTime: TicketTime?

    public var ticketType: TicketType?

    public init(cost: String? = nil, description: String? = nil, displayOrder: Int? = nil, messages: [Message]? = nil, mode: String? = nil, passengerType: String? = nil, ticketTime: TicketTime? = nil, ticketType: TicketType? = nil) {
        self.cost = cost
        self.description = description
        self.displayOrder = displayOrder
        self.messages = messages
        self.mode = mode
        self.passengerType = passengerType
        self.ticketTime = ticketTime
        self.ticketType = ticketType
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        cost = jsonDictionary.json(atKeyPath: "cost")
        description = jsonDictionary.json(atKeyPath: "description")
        displayOrder = jsonDictionary.json(atKeyPath: "displayOrder")
        messages = jsonDictionary.json(atKeyPath: "messages")
        mode = jsonDictionary.json(atKeyPath: "mode")
        passengerType = jsonDictionary.json(atKeyPath: "passengerType")
        ticketTime = jsonDictionary.json(atKeyPath: "ticketTime")
        ticketType = jsonDictionary.json(atKeyPath: "ticketType")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        if let cost = cost {
            dictionary["cost"] = cost
        }
        if let description = description {
            dictionary["description"] = description
        }
        if let displayOrder = displayOrder {
            dictionary["displayOrder"] = displayOrder
        }
        if let messages = messages?.encode() {
            dictionary["messages"] = messages
        }
        if let mode = mode {
            dictionary["mode"] = mode
        }
        if let passengerType = passengerType {
            dictionary["passengerType"] = passengerType
        }
        if let ticketTime = ticketTime?.encode() {
            dictionary["ticketTime"] = ticketTime
        }
        if let ticketType = ticketType?.encode() {
            dictionary["ticketType"] = ticketType
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
