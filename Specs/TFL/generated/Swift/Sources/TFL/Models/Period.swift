//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class Period: JSONDecodable, JSONEncodable, PrettyPrintable {

    public enum `Type`: String {
        case normal = "Normal"
        case frequencyHours = "FrequencyHours"
        case frequencyMinutes = "FrequencyMinutes"
        case unknown = "Unknown"

        public static let cases: [`Type`] = [
          .normal,
          .frequencyHours,
          .frequencyMinutes,
          .unknown,
        ]
    }

    public var frequency: ServiceFrequency?

    public var fromTime: TwentyFourHourClockTime?

    public var toTime: TwentyFourHourClockTime?

    public var type: `Type`?

    public init(frequency: ServiceFrequency? = nil, fromTime: TwentyFourHourClockTime? = nil, toTime: TwentyFourHourClockTime? = nil, type: `Type`? = nil) {
        self.frequency = frequency
        self.fromTime = fromTime
        self.toTime = toTime
        self.type = type
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        frequency = jsonDictionary.json(atKeyPath: "frequency")
        fromTime = jsonDictionary.json(atKeyPath: "fromTime")
        toTime = jsonDictionary.json(atKeyPath: "toTime")
        type = jsonDictionary.json(atKeyPath: "type")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        if let frequency = frequency?.encode() {
            dictionary["frequency"] = frequency
        }
        if let fromTime = fromTime?.encode() {
            dictionary["fromTime"] = fromTime
        }
        if let toTime = toTime?.encode() {
            dictionary["toTime"] = toTime
        }
        if let type = type?.encode() {
            dictionary["type"] = type
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
