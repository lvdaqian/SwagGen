//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class EmissionsSurchargeVehicle: JSONDecodable, JSONEncodable, PrettyPrintable {

    public enum Compliance: String {
        case notCompliant = "NotCompliant"
        case compliant = "Compliant"
        case exempt = "Exempt"

        public static let cases: [Compliance] = [
          .notCompliant,
          .compliant,
          .exempt,
        ]
    }

    public var colour: String?

    public var compliance: Compliance?

    public var make: String?

    public var model: String?

    public var type: String?

    public var vrm: String?

    public init(colour: String? = nil, compliance: Compliance? = nil, make: String? = nil, model: String? = nil, type: String? = nil, vrm: String? = nil) {
        self.colour = colour
        self.compliance = compliance
        self.make = make
        self.model = model
        self.type = type
        self.vrm = vrm
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        colour = jsonDictionary.json(atKeyPath: "colour")
        compliance = jsonDictionary.json(atKeyPath: "compliance")
        make = jsonDictionary.json(atKeyPath: "make")
        model = jsonDictionary.json(atKeyPath: "model")
        type = jsonDictionary.json(atKeyPath: "type")
        vrm = jsonDictionary.json(atKeyPath: "vrm")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        if let colour = colour {
            dictionary["colour"] = colour
        }
        if let compliance = compliance?.encode() {
            dictionary["compliance"] = compliance
        }
        if let make = make {
            dictionary["make"] = make
        }
        if let model = model {
            dictionary["model"] = model
        }
        if let type = type {
            dictionary["type"] = type
        }
        if let vrm = vrm {
            dictionary["vrm"] = vrm
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
