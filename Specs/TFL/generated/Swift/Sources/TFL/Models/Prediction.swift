//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

/** DTO to capture the prediction details */
public class Prediction: JSONDecodable, JSONEncodable, PrettyPrintable {

    /** Bearing (between 0 to 359) */
    public var bearing: String?

    /** The current location of the vehicle. */
    public var currentLocation: String?

    /** Name of the destination */
    public var destinationName: String?

    /** Naptan Identifier for the prediction's destination */
    public var destinationNaptanId: String?

    /** Direction (unified to inbound/outbound) */
    public var direction: String?

    /** The expected arrival time of the vehicle at the stop/station */
    public var expectedArrival: Date?

    /** The identitier for the prediction */
    public var id: String?

    /** Unique identifier for the Line */
    public var lineId: String?

    /** Line Name */
    public var lineName: String?

    /** The mode name of the station/line the prediction relates to */
    public var modeName: String?

    /** Identifier for the prediction */
    public var naptanId: String?

    /** The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache) */
    public var operationType: Int?

    /** Platform name (for bus, this is the stop letter) */
    public var platformName: String?

    /** Station name */
    public var stationName: String?

    /** The expiry time for the prediction */
    public var timeToLive: Date?

    /** Prediction of the Time to station in seconds */
    public var timeToStation: Int?

    /** Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration) */
    public var timestamp: Date?

    /** Keep the original timestamp from MongoDb fo debugging purposes */
    public var timing: PredictionTiming?

    /** Routing information or other descriptive text about the path of the vehicle towards the destination */
    public var towards: String?

    /** The actual vehicle in transit (for train modes, the leading car of the rolling set) */
    public var vehicleId: String?

    public init(bearing: String? = nil, currentLocation: String? = nil, destinationName: String? = nil, destinationNaptanId: String? = nil, direction: String? = nil, expectedArrival: Date? = nil, id: String? = nil, lineId: String? = nil, lineName: String? = nil, modeName: String? = nil, naptanId: String? = nil, operationType: Int? = nil, platformName: String? = nil, stationName: String? = nil, timeToLive: Date? = nil, timeToStation: Int? = nil, timestamp: Date? = nil, timing: PredictionTiming? = nil, towards: String? = nil, vehicleId: String? = nil) {
        self.bearing = bearing
        self.currentLocation = currentLocation
        self.destinationName = destinationName
        self.destinationNaptanId = destinationNaptanId
        self.direction = direction
        self.expectedArrival = expectedArrival
        self.id = id
        self.lineId = lineId
        self.lineName = lineName
        self.modeName = modeName
        self.naptanId = naptanId
        self.operationType = operationType
        self.platformName = platformName
        self.stationName = stationName
        self.timeToLive = timeToLive
        self.timeToStation = timeToStation
        self.timestamp = timestamp
        self.timing = timing
        self.towards = towards
        self.vehicleId = vehicleId
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        bearing = jsonDictionary.json(atKeyPath: "bearing")
        currentLocation = jsonDictionary.json(atKeyPath: "currentLocation")
        destinationName = jsonDictionary.json(atKeyPath: "destinationName")
        destinationNaptanId = jsonDictionary.json(atKeyPath: "destinationNaptanId")
        direction = jsonDictionary.json(atKeyPath: "direction")
        expectedArrival = jsonDictionary.json(atKeyPath: "expectedArrival")
        id = jsonDictionary.json(atKeyPath: "id")
        lineId = jsonDictionary.json(atKeyPath: "lineId")
        lineName = jsonDictionary.json(atKeyPath: "lineName")
        modeName = jsonDictionary.json(atKeyPath: "modeName")
        naptanId = jsonDictionary.json(atKeyPath: "naptanId")
        operationType = jsonDictionary.json(atKeyPath: "operationType")
        platformName = jsonDictionary.json(atKeyPath: "platformName")
        stationName = jsonDictionary.json(atKeyPath: "stationName")
        timeToLive = jsonDictionary.json(atKeyPath: "timeToLive")
        timeToStation = jsonDictionary.json(atKeyPath: "timeToStation")
        timestamp = jsonDictionary.json(atKeyPath: "timestamp")
        timing = jsonDictionary.json(atKeyPath: "timing")
        towards = jsonDictionary.json(atKeyPath: "towards")
        vehicleId = jsonDictionary.json(atKeyPath: "vehicleId")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        if let bearing = bearing {
            dictionary["bearing"] = bearing
        }
        if let currentLocation = currentLocation {
            dictionary["currentLocation"] = currentLocation
        }
        if let destinationName = destinationName {
            dictionary["destinationName"] = destinationName
        }
        if let destinationNaptanId = destinationNaptanId {
            dictionary["destinationNaptanId"] = destinationNaptanId
        }
        if let direction = direction {
            dictionary["direction"] = direction
        }
        if let expectedArrival = expectedArrival?.encode() {
            dictionary["expectedArrival"] = expectedArrival
        }
        if let id = id {
            dictionary["id"] = id
        }
        if let lineId = lineId {
            dictionary["lineId"] = lineId
        }
        if let lineName = lineName {
            dictionary["lineName"] = lineName
        }
        if let modeName = modeName {
            dictionary["modeName"] = modeName
        }
        if let naptanId = naptanId {
            dictionary["naptanId"] = naptanId
        }
        if let operationType = operationType {
            dictionary["operationType"] = operationType
        }
        if let platformName = platformName {
            dictionary["platformName"] = platformName
        }
        if let stationName = stationName {
            dictionary["stationName"] = stationName
        }
        if let timeToLive = timeToLive?.encode() {
            dictionary["timeToLive"] = timeToLive
        }
        if let timeToStation = timeToStation {
            dictionary["timeToStation"] = timeToStation
        }
        if let timestamp = timestamp?.encode() {
            dictionary["timestamp"] = timestamp
        }
        if let timing = timing?.encode() {
            dictionary["timing"] = timing
        }
        if let towards = towards {
            dictionary["towards"] = towards
        }
        if let vehicleId = vehicleId {
            dictionary["vehicleId"] = vehicleId
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
