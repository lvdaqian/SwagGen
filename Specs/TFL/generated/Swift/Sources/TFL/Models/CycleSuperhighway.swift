//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class CycleSuperhighway: JSONDecodable, JSONEncodable, PrettyPrintable {

    /** A LineString or MultiLineString that forms the route of the highway */
    public var geography: DbGeography?

    /** The Id */
    public var id: String?

    /** The long label to show on maps when zoomed in */
    public var label: String?

    /** The short label to show on maps */
    public var labelShort: String?

    /** When the data was last updated */
    public var modified: Date?

    /** True if the route is split into segments */
    public var segmented: Bool?

    public init(geography: DbGeography? = nil, id: String? = nil, label: String? = nil, labelShort: String? = nil, modified: Date? = nil, segmented: Bool? = nil) {
        self.geography = geography
        self.id = id
        self.label = label
        self.labelShort = labelShort
        self.modified = modified
        self.segmented = segmented
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        geography = jsonDictionary.json(atKeyPath: "geography")
        id = jsonDictionary.json(atKeyPath: "id")
        label = jsonDictionary.json(atKeyPath: "label")
        labelShort = jsonDictionary.json(atKeyPath: "labelShort")
        modified = jsonDictionary.json(atKeyPath: "modified")
        segmented = jsonDictionary.json(atKeyPath: "segmented")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        if let geography = geography?.encode() {
            dictionary["geography"] = geography
        }
        if let id = id {
            dictionary["id"] = id
        }
        if let label = label {
            dictionary["label"] = label
        }
        if let labelShort = labelShort {
            dictionary["labelShort"] = labelShort
        }
        if let modified = modified?.encode() {
            dictionary["modified"] = modified
        }
        if let segmented = segmented {
            dictionary["segmented"] = segmented
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
