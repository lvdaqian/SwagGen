//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class TimetableResponse: JSONDecodable, JSONEncodable, PrettyPrintable {

    public var direction: String?

    public var disambiguation: Disambiguation?

    public var lineId: String?

    public var lineName: String?

    public var pdfUrl: String?

    public var stations: [MatchedStop]?

    public var statusErrorMessage: String?

    public var stops: [MatchedStop]?

    public var timetable: Timetable?

    public init(direction: String? = nil, disambiguation: Disambiguation? = nil, lineId: String? = nil, lineName: String? = nil, pdfUrl: String? = nil, stations: [MatchedStop]? = nil, statusErrorMessage: String? = nil, stops: [MatchedStop]? = nil, timetable: Timetable? = nil) {
        self.direction = direction
        self.disambiguation = disambiguation
        self.lineId = lineId
        self.lineName = lineName
        self.pdfUrl = pdfUrl
        self.stations = stations
        self.statusErrorMessage = statusErrorMessage
        self.stops = stops
        self.timetable = timetable
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        direction = jsonDictionary.json(atKeyPath: "direction")
        disambiguation = jsonDictionary.json(atKeyPath: "disambiguation")
        lineId = jsonDictionary.json(atKeyPath: "lineId")
        lineName = jsonDictionary.json(atKeyPath: "lineName")
        pdfUrl = jsonDictionary.json(atKeyPath: "pdfUrl")
        stations = jsonDictionary.json(atKeyPath: "stations")
        statusErrorMessage = jsonDictionary.json(atKeyPath: "statusErrorMessage")
        stops = jsonDictionary.json(atKeyPath: "stops")
        timetable = jsonDictionary.json(atKeyPath: "timetable")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        if let direction = direction {
            dictionary["direction"] = direction
        }
        if let disambiguation = disambiguation?.encode() {
            dictionary["disambiguation"] = disambiguation
        }
        if let lineId = lineId {
            dictionary["lineId"] = lineId
        }
        if let lineName = lineName {
            dictionary["lineName"] = lineName
        }
        if let pdfUrl = pdfUrl {
            dictionary["pdfUrl"] = pdfUrl
        }
        if let stations = stations?.encode() {
            dictionary["stations"] = stations
        }
        if let statusErrorMessage = statusErrorMessage {
            dictionary["statusErrorMessage"] = statusErrorMessage
        }
        if let stops = stops?.encode() {
            dictionary["stops"] = stops
        }
        if let timetable = timetable?.encode() {
            dictionary["timetable"] = timetable
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
