//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class RoadDisruptionLine: JSONDecodable, JSONEncodable, PrettyPrintable {

    public var endDate: Date?

    public var endTime: String?

    public var id: Int?

    public var isDiversion: Bool?

    public var multiLineString: DbGeography?

    public var roadDisruptionId: String?

    public var startDate: Date?

    public var startTime: String?

    public init(endDate: Date? = nil, endTime: String? = nil, id: Int? = nil, isDiversion: Bool? = nil, multiLineString: DbGeography? = nil, roadDisruptionId: String? = nil, startDate: Date? = nil, startTime: String? = nil) {
        self.endDate = endDate
        self.endTime = endTime
        self.id = id
        self.isDiversion = isDiversion
        self.multiLineString = multiLineString
        self.roadDisruptionId = roadDisruptionId
        self.startDate = startDate
        self.startTime = startTime
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        endDate = jsonDictionary.json(atKeyPath: "endDate")
        endTime = jsonDictionary.json(atKeyPath: "endTime")
        id = jsonDictionary.json(atKeyPath: "id")
        isDiversion = jsonDictionary.json(atKeyPath: "isDiversion")
        multiLineString = jsonDictionary.json(atKeyPath: "multiLineString")
        roadDisruptionId = jsonDictionary.json(atKeyPath: "roadDisruptionId")
        startDate = jsonDictionary.json(atKeyPath: "startDate")
        startTime = jsonDictionary.json(atKeyPath: "startTime")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        if let endDate = endDate?.encode() {
            dictionary["endDate"] = endDate
        }
        if let endTime = endTime {
            dictionary["endTime"] = endTime
        }
        if let id = id {
            dictionary["id"] = id
        }
        if let isDiversion = isDiversion {
            dictionary["isDiversion"] = isDiversion
        }
        if let multiLineString = multiLineString?.encode() {
            dictionary["multiLineString"] = multiLineString
        }
        if let roadDisruptionId = roadDisruptionId {
            dictionary["roadDisruptionId"] = roadDisruptionId
        }
        if let startDate = startDate?.encode() {
            dictionary["startDate"] = startDate
        }
        if let startTime = startTime {
            dictionary["startTime"] = startTime
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
