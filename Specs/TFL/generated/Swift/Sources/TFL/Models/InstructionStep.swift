//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class InstructionStep: JSONDecodable, JSONEncodable, PrettyPrintable {

    public enum SkyDirectionDescription: String {
        case north = "North"
        case northEast = "NorthEast"
        case east = "East"
        case southEast = "SouthEast"
        case south = "South"
        case southWest = "SouthWest"
        case west = "West"
        case northWest = "NorthWest"

        public static let cases: [SkyDirectionDescription] = [
          .north,
          .northEast,
          .east,
          .southEast,
          .south,
          .southWest,
          .west,
          .northWest,
        ]
    }

    public enum TrackType: String {
        case cycleSuperHighway = "CycleSuperHighway"
        case canalTowpath = "CanalTowpath"
        case quietRoad = "QuietRoad"
        case provisionForCyclists = "ProvisionForCyclists"
        case busyRoads = "BusyRoads"
        case none = "None"
        case pushBike = "PushBike"

        public static let cases: [TrackType] = [
          .cycleSuperHighway,
          .canalTowpath,
          .quietRoad,
          .provisionForCyclists,
          .busyRoads,
          .none,
          .pushBike,
        ]
    }

    public var cumulativeDistance: Int?

    public var cumulativeTravelTime: Int?

    public var description: String?

    public var descriptionHeading: String?

    public var distance: Int?

    public var latitude: Double?

    public var longitude: Double?

    public var pathAttribute: PathAttribute?

    public var skyDirection: Int?

    public var skyDirectionDescription: SkyDirectionDescription?

    public var streetName: String?

    public var trackType: TrackType?

    public var turnDirection: String?

    public init(cumulativeDistance: Int? = nil, cumulativeTravelTime: Int? = nil, description: String? = nil, descriptionHeading: String? = nil, distance: Int? = nil, latitude: Double? = nil, longitude: Double? = nil, pathAttribute: PathAttribute? = nil, skyDirection: Int? = nil, skyDirectionDescription: SkyDirectionDescription? = nil, streetName: String? = nil, trackType: TrackType? = nil, turnDirection: String? = nil) {
        self.cumulativeDistance = cumulativeDistance
        self.cumulativeTravelTime = cumulativeTravelTime
        self.description = description
        self.descriptionHeading = descriptionHeading
        self.distance = distance
        self.latitude = latitude
        self.longitude = longitude
        self.pathAttribute = pathAttribute
        self.skyDirection = skyDirection
        self.skyDirectionDescription = skyDirectionDescription
        self.streetName = streetName
        self.trackType = trackType
        self.turnDirection = turnDirection
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        cumulativeDistance = jsonDictionary.json(atKeyPath: "cumulativeDistance")
        cumulativeTravelTime = jsonDictionary.json(atKeyPath: "cumulativeTravelTime")
        description = jsonDictionary.json(atKeyPath: "description")
        descriptionHeading = jsonDictionary.json(atKeyPath: "descriptionHeading")
        distance = jsonDictionary.json(atKeyPath: "distance")
        latitude = jsonDictionary.json(atKeyPath: "latitude")
        longitude = jsonDictionary.json(atKeyPath: "longitude")
        pathAttribute = jsonDictionary.json(atKeyPath: "pathAttribute")
        skyDirection = jsonDictionary.json(atKeyPath: "skyDirection")
        skyDirectionDescription = jsonDictionary.json(atKeyPath: "skyDirectionDescription")
        streetName = jsonDictionary.json(atKeyPath: "streetName")
        trackType = jsonDictionary.json(atKeyPath: "trackType")
        turnDirection = jsonDictionary.json(atKeyPath: "turnDirection")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        if let cumulativeDistance = cumulativeDistance {
            dictionary["cumulativeDistance"] = cumulativeDistance
        }
        if let cumulativeTravelTime = cumulativeTravelTime {
            dictionary["cumulativeTravelTime"] = cumulativeTravelTime
        }
        if let description = description {
            dictionary["description"] = description
        }
        if let descriptionHeading = descriptionHeading {
            dictionary["descriptionHeading"] = descriptionHeading
        }
        if let distance = distance {
            dictionary["distance"] = distance
        }
        if let latitude = latitude {
            dictionary["latitude"] = latitude
        }
        if let longitude = longitude {
            dictionary["longitude"] = longitude
        }
        if let pathAttribute = pathAttribute?.encode() {
            dictionary["pathAttribute"] = pathAttribute
        }
        if let skyDirection = skyDirection {
            dictionary["skyDirection"] = skyDirection
        }
        if let skyDirectionDescription = skyDirectionDescription?.encode() {
            dictionary["skyDirectionDescription"] = skyDirectionDescription
        }
        if let streetName = streetName {
            dictionary["streetName"] = streetName
        }
        if let trackType = trackType?.encode() {
            dictionary["trackType"] = trackType
        }
        if let turnDirection = turnDirection {
            dictionary["turnDirection"] = turnDirection
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
