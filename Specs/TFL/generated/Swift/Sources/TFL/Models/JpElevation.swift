//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class JpElevation: JSONDecodable, JSONEncodable, PrettyPrintable {

    public var distance: Int?

    public var endLat: Double?

    public var endLon: Double?

    public var gradient: Double?

    public var heightFromPreviousPoint: Int?

    public var startLat: Double?

    public var startLon: Double?

    public init(distance: Int? = nil, endLat: Double? = nil, endLon: Double? = nil, gradient: Double? = nil, heightFromPreviousPoint: Int? = nil, startLat: Double? = nil, startLon: Double? = nil) {
        self.distance = distance
        self.endLat = endLat
        self.endLon = endLon
        self.gradient = gradient
        self.heightFromPreviousPoint = heightFromPreviousPoint
        self.startLat = startLat
        self.startLon = startLon
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        distance = jsonDictionary.json(atKeyPath: "distance")
        endLat = jsonDictionary.json(atKeyPath: "endLat")
        endLon = jsonDictionary.json(atKeyPath: "endLon")
        gradient = jsonDictionary.json(atKeyPath: "gradient")
        heightFromPreviousPoint = jsonDictionary.json(atKeyPath: "heightFromPreviousPoint")
        startLat = jsonDictionary.json(atKeyPath: "startLat")
        startLon = jsonDictionary.json(atKeyPath: "startLon")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        if let distance = distance {
            dictionary["distance"] = distance
        }
        if let endLat = endLat {
            dictionary["endLat"] = endLat
        }
        if let endLon = endLon {
            dictionary["endLon"] = endLon
        }
        if let gradient = gradient {
            dictionary["gradient"] = gradient
        }
        if let heightFromPreviousPoint = heightFromPreviousPoint {
            dictionary["heightFromPreviousPoint"] = heightFromPreviousPoint
        }
        if let startLat = startLat {
            dictionary["startLat"] = startLat
        }
        if let startLon = startLon {
            dictionary["startLon"] = startLon
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
