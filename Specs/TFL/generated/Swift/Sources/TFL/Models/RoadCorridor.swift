//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class RoadCorridor: JSONDecodable, JSONEncodable, PrettyPrintable {

    /** The Bounds of the Corridor, given by the south-east followed by the north-west co-ordinate
            pair in geoJSON format e.g. "[[-1.241531,51.242151],[1.641223,53.765721]]" */
    public var bounds: String?

    /** The display name of the Corridor e.g. "North Circular (A406)". This
            may be identical to the Id. */
    public var displayName: String?

    /** The Envelope of the Corridor, given by the corner co-ordinates of a rectangular (four-point) polygon
            in geoJSON format e.g. "[[-1.241531,51.242151],[-1.241531,53.765721],[1.641223,53.765721],[1.641223,51.242151]]" */
    public var envelope: String?

    /** The group name of the Corridor e.g. "Central London". Most corridors are not grouped, in which case this field can be null. */
    public var group: String?

    /** The Id of the Corridor e.g. "A406" */
    public var id: String?

    /** The end of the period over which status has been aggregated, or null if this is the current corridor status. */
    public var statusAggregationEndDate: Date?

    /** The start of the period over which status has been aggregated, or null if this is the current corridor status. */
    public var statusAggregationStartDate: Date?

    /** Standard multi-mode status severity code */
    public var statusSeverity: String?

    /** Description of the status severity as applied to RoadCorridors */
    public var statusSeverityDescription: String?

    /** URL to retrieve this Corridor. */
    public var url: String?

    public init(bounds: String? = nil, displayName: String? = nil, envelope: String? = nil, group: String? = nil, id: String? = nil, statusAggregationEndDate: Date? = nil, statusAggregationStartDate: Date? = nil, statusSeverity: String? = nil, statusSeverityDescription: String? = nil, url: String? = nil) {
        self.bounds = bounds
        self.displayName = displayName
        self.envelope = envelope
        self.group = group
        self.id = id
        self.statusAggregationEndDate = statusAggregationEndDate
        self.statusAggregationStartDate = statusAggregationStartDate
        self.statusSeverity = statusSeverity
        self.statusSeverityDescription = statusSeverityDescription
        self.url = url
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        bounds = jsonDictionary.json(atKeyPath: "bounds")
        displayName = jsonDictionary.json(atKeyPath: "displayName")
        envelope = jsonDictionary.json(atKeyPath: "envelope")
        group = jsonDictionary.json(atKeyPath: "group")
        id = jsonDictionary.json(atKeyPath: "id")
        statusAggregationEndDate = jsonDictionary.json(atKeyPath: "statusAggregationEndDate")
        statusAggregationStartDate = jsonDictionary.json(atKeyPath: "statusAggregationStartDate")
        statusSeverity = jsonDictionary.json(atKeyPath: "statusSeverity")
        statusSeverityDescription = jsonDictionary.json(atKeyPath: "statusSeverityDescription")
        url = jsonDictionary.json(atKeyPath: "url")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        if let bounds = bounds {
            dictionary["bounds"] = bounds
        }
        if let displayName = displayName {
            dictionary["displayName"] = displayName
        }
        if let envelope = envelope {
            dictionary["envelope"] = envelope
        }
        if let group = group {
            dictionary["group"] = group
        }
        if let id = id {
            dictionary["id"] = id
        }
        if let statusAggregationEndDate = statusAggregationEndDate?.encode() {
            dictionary["statusAggregationEndDate"] = statusAggregationEndDate
        }
        if let statusAggregationStartDate = statusAggregationStartDate?.encode() {
            dictionary["statusAggregationStartDate"] = statusAggregationStartDate
        }
        if let statusSeverity = statusSeverity {
            dictionary["statusSeverity"] = statusSeverity
        }
        if let statusSeverityDescription = statusSeverityDescription {
            dictionary["statusSeverityDescription"] = statusSeverityDescription
        }
        if let url = url {
            dictionary["url"] = url
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
