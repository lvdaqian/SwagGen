//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

/** Represents a disruption to a route within the transport network. */
public class Disruption: JSONDecodable, JSONEncodable, PrettyPrintable {

    /** Gets or sets the category of this dispruption. */
    public enum Category: String {
        case undefined = "Undefined"
        case realTime = "RealTime"
        case plannedWork = "PlannedWork"
        case information = "Information"
        case event = "Event"
        case crowding = "Crowding"
        case statusAlert = "StatusAlert"

        public static let cases: [Category] = [
          .undefined,
          .realTime,
          .plannedWork,
          .information,
          .event,
          .crowding,
          .statusAlert,
        ]
    }

    /** Gets or sets the additionaInfo of this disruption. */
    public var additionalInfo: String?

    /** Gets or sets the routes affected by this disruption */
    public var affectedRoutes: [RouteSection]?

    /** Gets or sets the stops affected by this disruption */
    public var affectedStops: [StopPoint]?

    /** Gets or sets the category of this dispruption. */
    public var category: Category?

    /** Gets or sets the description of the category. */
    public var categoryDescription: String?

    public var closureText: String?

    /** Gets or sets the date/time when this disruption was created. */
    public var created: Date?

    /** Gets or sets the description of this disruption. */
    public var description: String?

    public var isBlocking: Bool?

    public var isWholeLine: Bool?

    /** Gets or sets the date/time when this disruption was last updated. */
    public var lastUpdate: Date?

    /** Gets or sets the disruption type of this dispruption. */
    public var type: String?

    public init(additionalInfo: String? = nil, affectedRoutes: [RouteSection]? = nil, affectedStops: [StopPoint]? = nil, category: Category? = nil, categoryDescription: String? = nil, closureText: String? = nil, created: Date? = nil, description: String? = nil, isBlocking: Bool? = nil, isWholeLine: Bool? = nil, lastUpdate: Date? = nil, type: String? = nil) {
        self.additionalInfo = additionalInfo
        self.affectedRoutes = affectedRoutes
        self.affectedStops = affectedStops
        self.category = category
        self.categoryDescription = categoryDescription
        self.closureText = closureText
        self.created = created
        self.description = description
        self.isBlocking = isBlocking
        self.isWholeLine = isWholeLine
        self.lastUpdate = lastUpdate
        self.type = type
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        additionalInfo = jsonDictionary.json(atKeyPath: "additionalInfo")
        affectedRoutes = jsonDictionary.json(atKeyPath: "affectedRoutes")
        affectedStops = jsonDictionary.json(atKeyPath: "affectedStops")
        category = jsonDictionary.json(atKeyPath: "category")
        categoryDescription = jsonDictionary.json(atKeyPath: "categoryDescription")
        closureText = jsonDictionary.json(atKeyPath: "closureText")
        created = jsonDictionary.json(atKeyPath: "created")
        description = jsonDictionary.json(atKeyPath: "description")
        isBlocking = jsonDictionary.json(atKeyPath: "isBlocking")
        isWholeLine = jsonDictionary.json(atKeyPath: "isWholeLine")
        lastUpdate = jsonDictionary.json(atKeyPath: "lastUpdate")
        type = jsonDictionary.json(atKeyPath: "type")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        if let additionalInfo = additionalInfo {
            dictionary["additionalInfo"] = additionalInfo
        }
        if let affectedRoutes = affectedRoutes?.encode() {
            dictionary["affectedRoutes"] = affectedRoutes
        }
        if let affectedStops = affectedStops?.encode() {
            dictionary["affectedStops"] = affectedStops
        }
        if let category = category?.encode() {
            dictionary["category"] = category
        }
        if let categoryDescription = categoryDescription {
            dictionary["categoryDescription"] = categoryDescription
        }
        if let closureText = closureText {
            dictionary["closureText"] = closureText
        }
        if let created = created?.encode() {
            dictionary["created"] = created
        }
        if let description = description {
            dictionary["description"] = description
        }
        if let isBlocking = isBlocking {
            dictionary["isBlocking"] = isBlocking
        }
        if let isWholeLine = isWholeLine {
            dictionary["isWholeLine"] = isWholeLine
        }
        if let lastUpdate = lastUpdate?.encode() {
            dictionary["lastUpdate"] = lastUpdate
        }
        if let type = type {
            dictionary["type"] = type
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
