//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class StopPoint: JSONDecodable, JSONEncodable, PrettyPrintable {

    public var accessibilitySummary: String?

    /** A bag of additional key/value pairs with extra information about this place. */
    public var additionalProperties: [AdditionalProperties]?

    public var children: [Place]?

    public var childrenUrls: [String]?

    /** A human readable name. */
    public var commonName: String?

    /** The distance of the place from its search point, if this is the result
            of a geographical search, otherwise zero. */
    public var distance: Double?

    public var fullName: String?

    public var hubNaptanCode: String?

    public var icsCode: String?

    /** A unique identifier. */
    public var id: String?

    /** The indicator of the stop point e.g. "Stop K" */
    public var indicator: String?

    /** WGS84 latitude of the location. */
    public var lat: Double?

    public var lineGroup: [LineGroup]?

    public var lineModeGroups: [LineModeGroup]?

    public var lines: [Identifier]?

    /** WGS84 longitude of the location. */
    public var lon: Double?

    public var modes: [String]?

    public var naptanId: String?

    public var naptanMode: String?

    /** The type of Place. See /Place/Meta/placeTypes for possible values. */
    public var placeType: String?

    public var platformName: String?

    public var smsCode: String?

    public var stationNaptan: String?

    public var status: Bool?

    /** The stop letter, if it could be cleansed from the Indicator e.g. "K" */
    public var stopLetter: String?

    public var stopType: String?

    /** The unique location of this resource. */
    public var url: String?

    public init(accessibilitySummary: String? = nil, additionalProperties: [AdditionalProperties]? = nil, children: [Place]? = nil, childrenUrls: [String]? = nil, commonName: String? = nil, distance: Double? = nil, fullName: String? = nil, hubNaptanCode: String? = nil, icsCode: String? = nil, id: String? = nil, indicator: String? = nil, lat: Double? = nil, lineGroup: [LineGroup]? = nil, lineModeGroups: [LineModeGroup]? = nil, lines: [Identifier]? = nil, lon: Double? = nil, modes: [String]? = nil, naptanId: String? = nil, naptanMode: String? = nil, placeType: String? = nil, platformName: String? = nil, smsCode: String? = nil, stationNaptan: String? = nil, status: Bool? = nil, stopLetter: String? = nil, stopType: String? = nil, url: String? = nil) {
        self.accessibilitySummary = accessibilitySummary
        self.additionalProperties = additionalProperties
        self.children = children
        self.childrenUrls = childrenUrls
        self.commonName = commonName
        self.distance = distance
        self.fullName = fullName
        self.hubNaptanCode = hubNaptanCode
        self.icsCode = icsCode
        self.id = id
        self.indicator = indicator
        self.lat = lat
        self.lineGroup = lineGroup
        self.lineModeGroups = lineModeGroups
        self.lines = lines
        self.lon = lon
        self.modes = modes
        self.naptanId = naptanId
        self.naptanMode = naptanMode
        self.placeType = placeType
        self.platformName = platformName
        self.smsCode = smsCode
        self.stationNaptan = stationNaptan
        self.status = status
        self.stopLetter = stopLetter
        self.stopType = stopType
        self.url = url
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        accessibilitySummary = jsonDictionary.json(atKeyPath: "accessibilitySummary")
        additionalProperties = jsonDictionary.json(atKeyPath: "additionalProperties")
        children = jsonDictionary.json(atKeyPath: "children")
        childrenUrls = jsonDictionary.json(atKeyPath: "childrenUrls")
        commonName = jsonDictionary.json(atKeyPath: "commonName")
        distance = jsonDictionary.json(atKeyPath: "distance")
        fullName = jsonDictionary.json(atKeyPath: "fullName")
        hubNaptanCode = jsonDictionary.json(atKeyPath: "hubNaptanCode")
        icsCode = jsonDictionary.json(atKeyPath: "icsCode")
        id = jsonDictionary.json(atKeyPath: "id")
        indicator = jsonDictionary.json(atKeyPath: "indicator")
        lat = jsonDictionary.json(atKeyPath: "lat")
        lineGroup = jsonDictionary.json(atKeyPath: "lineGroup")
        lineModeGroups = jsonDictionary.json(atKeyPath: "lineModeGroups")
        lines = jsonDictionary.json(atKeyPath: "lines")
        lon = jsonDictionary.json(atKeyPath: "lon")
        modes = jsonDictionary.json(atKeyPath: "modes")
        naptanId = jsonDictionary.json(atKeyPath: "naptanId")
        naptanMode = jsonDictionary.json(atKeyPath: "naptanMode")
        placeType = jsonDictionary.json(atKeyPath: "placeType")
        platformName = jsonDictionary.json(atKeyPath: "platformName")
        smsCode = jsonDictionary.json(atKeyPath: "smsCode")
        stationNaptan = jsonDictionary.json(atKeyPath: "stationNaptan")
        status = jsonDictionary.json(atKeyPath: "status")
        stopLetter = jsonDictionary.json(atKeyPath: "stopLetter")
        stopType = jsonDictionary.json(atKeyPath: "stopType")
        url = jsonDictionary.json(atKeyPath: "url")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        if let accessibilitySummary = accessibilitySummary {
            dictionary["accessibilitySummary"] = accessibilitySummary
        }
        if let additionalProperties = additionalProperties?.encode() {
            dictionary["additionalProperties"] = additionalProperties
        }
        if let children = children?.encode() {
            dictionary["children"] = children
        }
        if let childrenUrls = childrenUrls {
            dictionary["childrenUrls"] = childrenUrls
        }
        if let commonName = commonName {
            dictionary["commonName"] = commonName
        }
        if let distance = distance {
            dictionary["distance"] = distance
        }
        if let fullName = fullName {
            dictionary["fullName"] = fullName
        }
        if let hubNaptanCode = hubNaptanCode {
            dictionary["hubNaptanCode"] = hubNaptanCode
        }
        if let icsCode = icsCode {
            dictionary["icsCode"] = icsCode
        }
        if let id = id {
            dictionary["id"] = id
        }
        if let indicator = indicator {
            dictionary["indicator"] = indicator
        }
        if let lat = lat {
            dictionary["lat"] = lat
        }
        if let lineGroup = lineGroup?.encode() {
            dictionary["lineGroup"] = lineGroup
        }
        if let lineModeGroups = lineModeGroups?.encode() {
            dictionary["lineModeGroups"] = lineModeGroups
        }
        if let lines = lines?.encode() {
            dictionary["lines"] = lines
        }
        if let lon = lon {
            dictionary["lon"] = lon
        }
        if let modes = modes {
            dictionary["modes"] = modes
        }
        if let naptanId = naptanId {
            dictionary["naptanId"] = naptanId
        }
        if let naptanMode = naptanMode {
            dictionary["naptanMode"] = naptanMode
        }
        if let placeType = placeType {
            dictionary["placeType"] = placeType
        }
        if let platformName = platformName {
            dictionary["platformName"] = platformName
        }
        if let smsCode = smsCode {
            dictionary["smsCode"] = smsCode
        }
        if let stationNaptan = stationNaptan {
            dictionary["stationNaptan"] = stationNaptan
        }
        if let status = status {
            dictionary["status"] = status
        }
        if let stopLetter = stopLetter {
            dictionary["stopLetter"] = stopLetter
        }
        if let stopType = stopType {
            dictionary["stopType"] = stopType
        }
        if let url = url {
            dictionary["url"] = url
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
