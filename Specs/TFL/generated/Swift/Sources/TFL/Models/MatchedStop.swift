//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class MatchedStop: JSONDecodable, JSONEncodable, PrettyPrintable {

    public var accessibilitySummary: String?

    public var direction: String?

    public var hasDisruption: Bool?

    public var icsId: String?

    public var id: String?

    public var lat: Double?

    public var lines: [Identifier]?

    public var lon: Double?

    public var modes: [String]?

    public var name: String?

    public var parentId: String?

    public var routeId: Int?

    public var stationId: String?

    public var status: Bool?

    public var stopLetter: String?

    public var stopType: String?

    public var topMostParentId: String?

    public var towards: String?

    public var url: String?

    public var zone: String?

    public init(accessibilitySummary: String? = nil, direction: String? = nil, hasDisruption: Bool? = nil, icsId: String? = nil, id: String? = nil, lat: Double? = nil, lines: [Identifier]? = nil, lon: Double? = nil, modes: [String]? = nil, name: String? = nil, parentId: String? = nil, routeId: Int? = nil, stationId: String? = nil, status: Bool? = nil, stopLetter: String? = nil, stopType: String? = nil, topMostParentId: String? = nil, towards: String? = nil, url: String? = nil, zone: String? = nil) {
        self.accessibilitySummary = accessibilitySummary
        self.direction = direction
        self.hasDisruption = hasDisruption
        self.icsId = icsId
        self.id = id
        self.lat = lat
        self.lines = lines
        self.lon = lon
        self.modes = modes
        self.name = name
        self.parentId = parentId
        self.routeId = routeId
        self.stationId = stationId
        self.status = status
        self.stopLetter = stopLetter
        self.stopType = stopType
        self.topMostParentId = topMostParentId
        self.towards = towards
        self.url = url
        self.zone = zone
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        accessibilitySummary = jsonDictionary.json(atKeyPath: "accessibilitySummary")
        direction = jsonDictionary.json(atKeyPath: "direction")
        hasDisruption = jsonDictionary.json(atKeyPath: "hasDisruption")
        icsId = jsonDictionary.json(atKeyPath: "icsId")
        id = jsonDictionary.json(atKeyPath: "id")
        lat = jsonDictionary.json(atKeyPath: "lat")
        lines = jsonDictionary.json(atKeyPath: "lines")
        lon = jsonDictionary.json(atKeyPath: "lon")
        modes = jsonDictionary.json(atKeyPath: "modes")
        name = jsonDictionary.json(atKeyPath: "name")
        parentId = jsonDictionary.json(atKeyPath: "parentId")
        routeId = jsonDictionary.json(atKeyPath: "routeId")
        stationId = jsonDictionary.json(atKeyPath: "stationId")
        status = jsonDictionary.json(atKeyPath: "status")
        stopLetter = jsonDictionary.json(atKeyPath: "stopLetter")
        stopType = jsonDictionary.json(atKeyPath: "stopType")
        topMostParentId = jsonDictionary.json(atKeyPath: "topMostParentId")
        towards = jsonDictionary.json(atKeyPath: "towards")
        url = jsonDictionary.json(atKeyPath: "url")
        zone = jsonDictionary.json(atKeyPath: "zone")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        if let accessibilitySummary = accessibilitySummary {
            dictionary["accessibilitySummary"] = accessibilitySummary
        }
        if let direction = direction {
            dictionary["direction"] = direction
        }
        if let hasDisruption = hasDisruption {
            dictionary["hasDisruption"] = hasDisruption
        }
        if let icsId = icsId {
            dictionary["icsId"] = icsId
        }
        if let id = id {
            dictionary["id"] = id
        }
        if let lat = lat {
            dictionary["lat"] = lat
        }
        if let lines = lines?.encode() {
            dictionary["lines"] = lines
        }
        if let lon = lon {
            dictionary["lon"] = lon
        }
        if let modes = modes {
            dictionary["modes"] = modes
        }
        if let name = name {
            dictionary["name"] = name
        }
        if let parentId = parentId {
            dictionary["parentId"] = parentId
        }
        if let routeId = routeId {
            dictionary["routeId"] = routeId
        }
        if let stationId = stationId {
            dictionary["stationId"] = stationId
        }
        if let status = status {
            dictionary["status"] = status
        }
        if let stopLetter = stopLetter {
            dictionary["stopLetter"] = stopLetter
        }
        if let stopType = stopType {
            dictionary["stopType"] = stopType
        }
        if let topMostParentId = topMostParentId {
            dictionary["topMostParentId"] = topMostParentId
        }
        if let towards = towards {
            dictionary["towards"] = towards
        }
        if let url = url {
            dictionary["url"] = url
        }
        if let zone = zone {
            dictionary["zone"] = zone
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
