//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class RoadProject: JSONDecodable, JSONEncodable, PrettyPrintable {

    public enum Phase: String {
        case unscoped = "Unscoped"
        case concept = "Concept"
        case consultationEnded = "ConsultationEnded"
        case consultation = "Consultation"
        case construction = "Construction"
        case complete = "Complete"

        public static let cases: [Phase] = [
          .unscoped,
          .concept,
          .consultationEnded,
          .consultation,
          .construction,
          .complete,
        ]
    }

    public var boroughsBenefited: [String]?

    public var constructionEndDate: Date?

    public var constructionStartDate: Date?

    public var consultationEndDate: Date?

    public var consultationPageUrl: String?

    public var consultationStartDate: Date?

    public var contactEmail: String?

    public var contactName: String?

    public var cycleSuperhighwayId: String?

    public var externalPageUrl: String?

    public var phase: Phase?

    public var projectDescription: String?

    public var projectId: String?

    public var projectName: String?

    public var projectPageUrl: String?

    public var projectSummaryPageUrl: String?

    public var schemeName: String?

    public init(boroughsBenefited: [String]? = nil, constructionEndDate: Date? = nil, constructionStartDate: Date? = nil, consultationEndDate: Date? = nil, consultationPageUrl: String? = nil, consultationStartDate: Date? = nil, contactEmail: String? = nil, contactName: String? = nil, cycleSuperhighwayId: String? = nil, externalPageUrl: String? = nil, phase: Phase? = nil, projectDescription: String? = nil, projectId: String? = nil, projectName: String? = nil, projectPageUrl: String? = nil, projectSummaryPageUrl: String? = nil, schemeName: String? = nil) {
        self.boroughsBenefited = boroughsBenefited
        self.constructionEndDate = constructionEndDate
        self.constructionStartDate = constructionStartDate
        self.consultationEndDate = consultationEndDate
        self.consultationPageUrl = consultationPageUrl
        self.consultationStartDate = consultationStartDate
        self.contactEmail = contactEmail
        self.contactName = contactName
        self.cycleSuperhighwayId = cycleSuperhighwayId
        self.externalPageUrl = externalPageUrl
        self.phase = phase
        self.projectDescription = projectDescription
        self.projectId = projectId
        self.projectName = projectName
        self.projectPageUrl = projectPageUrl
        self.projectSummaryPageUrl = projectSummaryPageUrl
        self.schemeName = schemeName
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        boroughsBenefited = jsonDictionary.json(atKeyPath: "boroughsBenefited")
        constructionEndDate = jsonDictionary.json(atKeyPath: "constructionEndDate")
        constructionStartDate = jsonDictionary.json(atKeyPath: "constructionStartDate")
        consultationEndDate = jsonDictionary.json(atKeyPath: "consultationEndDate")
        consultationPageUrl = jsonDictionary.json(atKeyPath: "consultationPageUrl")
        consultationStartDate = jsonDictionary.json(atKeyPath: "consultationStartDate")
        contactEmail = jsonDictionary.json(atKeyPath: "contactEmail")
        contactName = jsonDictionary.json(atKeyPath: "contactName")
        cycleSuperhighwayId = jsonDictionary.json(atKeyPath: "cycleSuperhighwayId")
        externalPageUrl = jsonDictionary.json(atKeyPath: "externalPageUrl")
        phase = jsonDictionary.json(atKeyPath: "phase")
        projectDescription = jsonDictionary.json(atKeyPath: "projectDescription")
        projectId = jsonDictionary.json(atKeyPath: "projectId")
        projectName = jsonDictionary.json(atKeyPath: "projectName")
        projectPageUrl = jsonDictionary.json(atKeyPath: "projectPageUrl")
        projectSummaryPageUrl = jsonDictionary.json(atKeyPath: "projectSummaryPageUrl")
        schemeName = jsonDictionary.json(atKeyPath: "schemeName")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        if let boroughsBenefited = boroughsBenefited {
            dictionary["boroughsBenefited"] = boroughsBenefited
        }
        if let constructionEndDate = constructionEndDate?.encode() {
            dictionary["constructionEndDate"] = constructionEndDate
        }
        if let constructionStartDate = constructionStartDate?.encode() {
            dictionary["constructionStartDate"] = constructionStartDate
        }
        if let consultationEndDate = consultationEndDate?.encode() {
            dictionary["consultationEndDate"] = consultationEndDate
        }
        if let consultationPageUrl = consultationPageUrl {
            dictionary["consultationPageUrl"] = consultationPageUrl
        }
        if let consultationStartDate = consultationStartDate?.encode() {
            dictionary["consultationStartDate"] = consultationStartDate
        }
        if let contactEmail = contactEmail {
            dictionary["contactEmail"] = contactEmail
        }
        if let contactName = contactName {
            dictionary["contactName"] = contactName
        }
        if let cycleSuperhighwayId = cycleSuperhighwayId {
            dictionary["cycleSuperhighwayId"] = cycleSuperhighwayId
        }
        if let externalPageUrl = externalPageUrl {
            dictionary["externalPageUrl"] = externalPageUrl
        }
        if let phase = phase?.encode() {
            dictionary["phase"] = phase
        }
        if let projectDescription = projectDescription {
            dictionary["projectDescription"] = projectDescription
        }
        if let projectId = projectId {
            dictionary["projectId"] = projectId
        }
        if let projectName = projectName {
            dictionary["projectName"] = projectName
        }
        if let projectPageUrl = projectPageUrl {
            dictionary["projectPageUrl"] = projectPageUrl
        }
        if let projectSummaryPageUrl = projectSummaryPageUrl {
            dictionary["projectSummaryPageUrl"] = projectSummaryPageUrl
        }
        if let schemeName = schemeName {
            dictionary["schemeName"] = schemeName
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
