//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class Leg: JSONDecodable, JSONEncodable, PrettyPrintable {

    public var arrivalPoint: Point?

    public var arrivalTime: Date?

    public var departurePoint: Point?

    public var departureTime: Date?

    public var disruptions: [Disruption]?

    public var distance: Double?

    public var duration: Int?

    public var hasFixedLocations: Bool?

    /** Describes the action the user need to take for this section, E.g. "walk to the
            district line" */
    public var instruction: Instruction?

    public var isDisrupted: Bool?

    public var mode: Identifier?

    public var obstacles: [Obstacle]?

    public var path: Path?

    public var plannedWorks: [PlannedWork]?

    public var routeOptions: [RouteOption]?

    public var speed: String?

    public init(arrivalPoint: Point? = nil, arrivalTime: Date? = nil, departurePoint: Point? = nil, departureTime: Date? = nil, disruptions: [Disruption]? = nil, distance: Double? = nil, duration: Int? = nil, hasFixedLocations: Bool? = nil, instruction: Instruction? = nil, isDisrupted: Bool? = nil, mode: Identifier? = nil, obstacles: [Obstacle]? = nil, path: Path? = nil, plannedWorks: [PlannedWork]? = nil, routeOptions: [RouteOption]? = nil, speed: String? = nil) {
        self.arrivalPoint = arrivalPoint
        self.arrivalTime = arrivalTime
        self.departurePoint = departurePoint
        self.departureTime = departureTime
        self.disruptions = disruptions
        self.distance = distance
        self.duration = duration
        self.hasFixedLocations = hasFixedLocations
        self.instruction = instruction
        self.isDisrupted = isDisrupted
        self.mode = mode
        self.obstacles = obstacles
        self.path = path
        self.plannedWorks = plannedWorks
        self.routeOptions = routeOptions
        self.speed = speed
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        arrivalPoint = jsonDictionary.json(atKeyPath: "arrivalPoint")
        arrivalTime = jsonDictionary.json(atKeyPath: "arrivalTime")
        departurePoint = jsonDictionary.json(atKeyPath: "departurePoint")
        departureTime = jsonDictionary.json(atKeyPath: "departureTime")
        disruptions = jsonDictionary.json(atKeyPath: "disruptions")
        distance = jsonDictionary.json(atKeyPath: "distance")
        duration = jsonDictionary.json(atKeyPath: "duration")
        hasFixedLocations = jsonDictionary.json(atKeyPath: "hasFixedLocations")
        instruction = jsonDictionary.json(atKeyPath: "instruction")
        isDisrupted = jsonDictionary.json(atKeyPath: "isDisrupted")
        mode = jsonDictionary.json(atKeyPath: "mode")
        obstacles = jsonDictionary.json(atKeyPath: "obstacles")
        path = jsonDictionary.json(atKeyPath: "path")
        plannedWorks = jsonDictionary.json(atKeyPath: "plannedWorks")
        routeOptions = jsonDictionary.json(atKeyPath: "routeOptions")
        speed = jsonDictionary.json(atKeyPath: "speed")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        if let arrivalPoint = arrivalPoint?.encode() {
            dictionary["arrivalPoint"] = arrivalPoint
        }
        if let arrivalTime = arrivalTime?.encode() {
            dictionary["arrivalTime"] = arrivalTime
        }
        if let departurePoint = departurePoint?.encode() {
            dictionary["departurePoint"] = departurePoint
        }
        if let departureTime = departureTime?.encode() {
            dictionary["departureTime"] = departureTime
        }
        if let disruptions = disruptions?.encode() {
            dictionary["disruptions"] = disruptions
        }
        if let distance = distance {
            dictionary["distance"] = distance
        }
        if let duration = duration {
            dictionary["duration"] = duration
        }
        if let hasFixedLocations = hasFixedLocations {
            dictionary["hasFixedLocations"] = hasFixedLocations
        }
        if let instruction = instruction?.encode() {
            dictionary["instruction"] = instruction
        }
        if let isDisrupted = isDisrupted {
            dictionary["isDisrupted"] = isDisrupted
        }
        if let mode = mode?.encode() {
            dictionary["mode"] = mode
        }
        if let obstacles = obstacles?.encode() {
            dictionary["obstacles"] = obstacles
        }
        if let path = path?.encode() {
            dictionary["path"] = path
        }
        if let plannedWorks = plannedWorks?.encode() {
            dictionary["plannedWorks"] = plannedWorks
        }
        if let routeOptions = routeOptions?.encode() {
            dictionary["routeOptions"] = routeOptions
        }
        if let speed = speed {
            dictionary["speed"] = speed
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
