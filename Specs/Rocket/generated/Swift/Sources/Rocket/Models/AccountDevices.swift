//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class AccountDevices: JSONDecodable, JSONEncodable, PrettyPrintable {

    /** The array of registered playack devices. */
    public var devices: [Device]

    /** The maximum number of playback devices that can be registered
under an account at a single time.

If there is no maximum defined this value will be `-1`.
 */
    public var maxRegistered: Int

    /** Defines the start and end date of the current deregistration window along with calculated limits.

If undefined then there are no deregistration limits for a period.

For example given a deregistration period of 30 days, this sliding window will start on the
oldest deregistration of the last 30 days, and end 30 days from that deregistration date.

In this window there is a limit on how many devices can be deregistered in 30 days.
If exceeded then no more devices can be deregistered unless the oldest deregistration drops
off the 30 day window.
 */
    public var deregistrationWindow: DeviceRegistrationWindow?

    /** Defines the start and end date of the current registration window along with calculated limits.

If undefined then there are no registration limits for a period.

For example given a registration period of 30 days, this sliding window will start on the
oldest registration of the last 30 days, and end 30 days from that registration date.

In this window there is a limit on how many devices can be registered in 30 days.
If exceeded then no more devices can be registered unless one is deregistered or the
oldest registration drops off the 30 day window.

Deregistration also has potential limits which may prevent a device being deregistered.
In this case the user must wait until the oldest deregistered device is more than 30
days old.
 */
    public var registrationWindow: DeviceRegistrationWindow?

    public init(devices: [Device], maxRegistered: Int, deregistrationWindow: DeviceRegistrationWindow? = nil, registrationWindow: DeviceRegistrationWindow? = nil) {
        self.devices = devices
        self.maxRegistered = maxRegistered
        self.deregistrationWindow = deregistrationWindow
        self.registrationWindow = registrationWindow
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        devices = try jsonDictionary.json(atKeyPath: "devices")
        maxRegistered = try jsonDictionary.json(atKeyPath: "maxRegistered")
        deregistrationWindow = jsonDictionary.json(atKeyPath: "deregistrationWindow")
        registrationWindow = jsonDictionary.json(atKeyPath: "registrationWindow")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        dictionary["devices"] = devices.encode()
        dictionary["maxRegistered"] = maxRegistered
        if let deregistrationWindow = deregistrationWindow?.encode() {
            dictionary["deregistrationWindow"] = deregistrationWindow
        }
        if let registrationWindow = registrationWindow?.encode() {
            dictionary["registrationWindow"] = registrationWindow
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
