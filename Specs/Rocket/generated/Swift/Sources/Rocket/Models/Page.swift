//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class Page: PageSummary {

    /** Entries of a page */
    public var entries: [PageEntry]

    /** A map of custom fields defined by a curator for a page. */
    public var customFields: [String: Any]?

    /** When the page represents the detail of an item this property will contain the item detail.

For clients consuming an item detail page, any page row entry of type `ItemDetailEntry`
should look to obtain its data from the contents of this property.

*Note that you have to be using feature flag `idp` to enable this
on item detail pages. See `feature-flags.md` for further details.*
 */
    public var item: ItemDetail?

    /** When the page represents the detail of a List this property will contain the list in question.

For clients consuming a list detail page, any page row entry of type `ListDetailEntry`
should look to obtain its data from the contents of this property.

*Note that you have to be using feature flag `ldp` to enable this
on list detail pages. See `feature-flags.md` for further details.*
 */
    public var list: ItemList?

    public var metadata: PageMetadata?

    public init(id: String, path: String, title: String, template: String, isStatic: Bool, isSystemPage: Bool, entries: [PageEntry], key: String? = nil, customFields: [String: Any]? = nil, item: ItemDetail? = nil, list: ItemList? = nil, metadata: PageMetadata? = nil) {
        self.entries = entries
        self.customFields = customFields
        self.item = item
        self.list = list
        self.metadata = metadata
        super.init(id: id, path: path, title: title, template: template, isStatic: isStatic, isSystemPage: isSystemPage, key: key)
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        entries = try jsonDictionary.json(atKeyPath: "entries")
        customFields = jsonDictionary.json(atKeyPath: "customFields")
        item = jsonDictionary.json(atKeyPath: "item")
        list = jsonDictionary.json(atKeyPath: "list")
        metadata = jsonDictionary.json(atKeyPath: "metadata")
        try super.init(jsonDictionary: jsonDictionary)
    }

    public override func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        dictionary["entries"] = entries.encode()
        if let customFields = customFields {
            dictionary["customFields"] = customFields
        }
        if let item = item?.encode() {
            dictionary["item"] = item
        }
        if let list = list?.encode() {
            dictionary["list"] = list
        }
        if let metadata = metadata?.encode() {
            dictionary["metadata"] = metadata
        }
        let superDictionary = super.encode()
        for (key, value) in superDictionary {
            dictionary[key] = value
        }
        return dictionary
    }
}
