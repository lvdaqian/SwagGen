//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class AccountTokenRequest: JSONDecodable, JSONEncodable, PrettyPrintable {

    /** The scope(s) of the tokens required.
    For each scope listed an Account and Profile token of that scope will be returned
     */
    public enum Scopes: String {
        case catalog = "Catalog"
        case commerce = "Commerce"
        case settings = "Settings"
        case playback = "Playback"

        public static let cases: [Scopes] = [
          .catalog,
          .commerce,
          .settings,
          .playback,
        ]
    }

    /** If you specify a cookie type then a content filter cookie will be returned
    along with the token(s). This is only really intended for web based clients which
    need to pass the cookies to a server to render a page based on the users
    content filters, e.g subscription code.

    If type `Session` the cookie will be session based.
    If type `Persistent` the cookie will have a medium term lifespan.
    If undefined no cookies will be set.
     */
    public enum CookieType: String {
        case session = "Session"
        case persistent = "Persistent"

        public static let cases: [CookieType] = [
          .session,
          .persistent,
        ]
    }

    /** The email associated with the account. */
    public var email: String

    /** The scope(s) of the tokens required.
For each scope listed an Account and Profile token of that scope will be returned
 */
    public var scopes: [Scopes]

    /** If you specify a cookie type then a content filter cookie will be returned
along with the token(s). This is only really intended for web based clients which
need to pass the cookies to a server to render a page based on the users
content filters, e.g subscription code.

If type `Session` the cookie will be session based.
If type `Persistent` the cookie will have a medium term lifespan.
If undefined no cookies will be set.
 */
    public var cookieType: CookieType?

    /** The password associated with the account.

Either a pin or password should be supplied. If both are supplied the password will take precedence.
 */
    public var password: String?

    /** The pin associated with the account.

Either a pin or password should be supplied. If both are supplied the password will take precedence.
 */
    public var pin: String?

    public init(email: String, scopes: [Scopes], cookieType: CookieType? = nil, password: String? = nil, pin: String? = nil) {
        self.email = email
        self.scopes = scopes
        self.cookieType = cookieType
        self.password = password
        self.pin = pin
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        email = try jsonDictionary.json(atKeyPath: "email")
        scopes = try jsonDictionary.json(atKeyPath: "scopes")
        cookieType = jsonDictionary.json(atKeyPath: "cookieType")
        password = jsonDictionary.json(atKeyPath: "password")
        pin = jsonDictionary.json(atKeyPath: "pin")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        dictionary["email"] = email
        dictionary["scopes"] = scopes.encode()
        if let cookieType = cookieType?.encode() {
            dictionary["cookieType"] = cookieType
        }
        if let password = password {
            dictionary["password"] = password
        }
        if let pin = pin {
            dictionary["pin"] = pin
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
