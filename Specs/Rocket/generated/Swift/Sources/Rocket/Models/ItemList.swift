//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

/** A pageable list of items. */
public class ItemList: JSONDecodable, JSONEncodable, PrettyPrintable {

    /** The id of this list */
    public var id: String

    /** The total size of the list */
    public var size: Int

    /** A list of items */
    public var items: [ItemSummary]

    /** Metadata describing how to load the next or previous page of the list */
    public var paging: Pagination

    /** The path of this list */
    public var path: String

    /** A map of custom fields defined by a curator for a list. */
    public var customFields: [String: Any]?

    /** A full description of this list. */
    public var description: String?

    public var images: [String: URL]?

    /** The types of items in the list */
    public var itemTypes: [ItemType]?

    /** If this list is parameterized, then this contains the parameter of the list in the format `name:value`.
For example the Movies Genre list will take a parameter `genre` with a given value. e.g. `genre:action` or `genre:drama`. */
    public var parameter: String?

    /** A short description of this list. */
    public var shortDescription: String?

    /** The tagline of the item. */
    public var tagline: String?

    /** The title of this list */
    public var title: String?

    public init(id: String, size: Int, items: [ItemSummary], paging: Pagination, path: String, customFields: [String: Any]? = nil, description: String? = nil, images: [String: URL]? = nil, itemTypes: [ItemType]? = nil, parameter: String? = nil, shortDescription: String? = nil, tagline: String? = nil, title: String? = nil) {
        self.id = id
        self.size = size
        self.items = items
        self.paging = paging
        self.path = path
        self.customFields = customFields
        self.description = description
        self.images = images
        self.itemTypes = itemTypes
        self.parameter = parameter
        self.shortDescription = shortDescription
        self.tagline = tagline
        self.title = title
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        id = try jsonDictionary.json(atKeyPath: "id")
        size = try jsonDictionary.json(atKeyPath: "size")
        items = try jsonDictionary.json(atKeyPath: "items")
        paging = try jsonDictionary.json(atKeyPath: "paging")
        path = try jsonDictionary.json(atKeyPath: "path")
        customFields = jsonDictionary.json(atKeyPath: "customFields")
        description = jsonDictionary.json(atKeyPath: "description")
        images = jsonDictionary.json(atKeyPath: "images")
        itemTypes = jsonDictionary.json(atKeyPath: "itemTypes")
        parameter = jsonDictionary.json(atKeyPath: "parameter")
        shortDescription = jsonDictionary.json(atKeyPath: "shortDescription")
        tagline = jsonDictionary.json(atKeyPath: "tagline")
        title = jsonDictionary.json(atKeyPath: "title")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        dictionary["id"] = id
        dictionary["size"] = size
        dictionary["items"] = items.encode()
        dictionary["paging"] = paging.encode()
        dictionary["path"] = path
        if let customFields = customFields {
            dictionary["customFields"] = customFields
        }
        if let description = description {
            dictionary["description"] = description
        }
        if let images = images?.encode() {
            dictionary["images"] = images
        }
        if let itemTypes = itemTypes?.encode() {
            dictionary["itemTypes"] = itemTypes
        }
        if let parameter = parameter {
            dictionary["parameter"] = parameter
        }
        if let shortDescription = shortDescription {
            dictionary["shortDescription"] = shortDescription
        }
        if let tagline = tagline {
            dictionary["tagline"] = tagline
        }
        if let title = title {
            dictionary["title"] = title
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
