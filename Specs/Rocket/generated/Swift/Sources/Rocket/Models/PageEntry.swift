//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

/** Represents an entry of a Page.
Defines what specific piece of content should be presented e.g. an Item or ItemList.
Also defines what visual template should be used to render that content.
 */
public class PageEntry: JSONDecodable, JSONEncodable, PrettyPrintable {

    /** The type of PageEntry. Used to help identify what type of content will be presented. */
    public enum `Type`: String {
        case itemEntry = "ItemEntry"
        case itemDetailEntry = "ItemDetailEntry"
        case listEntry = "ListEntry"
        case listDetailEntry = "ListDetailEntry"
        case userEntry = "UserEntry"
        case textEntry = "TextEntry"
        case imageEntry = "ImageEntry"
        case customEntry = "CustomEntry"
        case peopleEntry = "PeopleEntry"

        public static let cases: [`Type`] = [
          .itemEntry,
          .itemDetailEntry,
          .listEntry,
          .listDetailEntry,
          .userEntry,
          .textEntry,
          .imageEntry,
          .customEntry,
          .peopleEntry,
        ]
    }

    /** The unique identifier for a page entry. */
    public var id: String

    /** The type of PageEntry. Used to help identify what type of content will be presented. */
    public var type: `Type`

    /** The name of the Page Entry. */
    public var title: String

    /** Template type used to present the content of the PageEntry. */
    public var template: String

    /** A map of custom fields defined by a curator for a page entry. */
    public var customFields: [String: Any]?

    /** The images for the page entry if any.

For example the images of an `ImageEntry`.
 */
    public var images: [String: URL]?

    /** If 'type' is 'ItemEntry' then this is the item to be represented. */
    public var item: ItemSummary?

    /** If 'type' is 'ListEntry' or 'UserEntry' then this is the list to be represented. */
    public var list: ItemList?

    /** If 'type' is 'PeopleEntry' then this is the array of people to present. */
    public var people: [Person]?

    /** If 'type' is 'TextEntry' then this is the text to be represented. */
    public var text: String?

    public init(id: String, type: `Type`, title: String, template: String, customFields: [String: Any]? = nil, images: [String: URL]? = nil, item: ItemSummary? = nil, list: ItemList? = nil, people: [Person]? = nil, text: String? = nil) {
        self.id = id
        self.type = type
        self.title = title
        self.template = template
        self.customFields = customFields
        self.images = images
        self.item = item
        self.list = list
        self.people = people
        self.text = text
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        id = try jsonDictionary.json(atKeyPath: "id")
        type = try jsonDictionary.json(atKeyPath: "type")
        title = try jsonDictionary.json(atKeyPath: "title")
        template = try jsonDictionary.json(atKeyPath: "template")
        customFields = jsonDictionary.json(atKeyPath: "customFields")
        images = jsonDictionary.json(atKeyPath: "images")
        item = jsonDictionary.json(atKeyPath: "item")
        list = jsonDictionary.json(atKeyPath: "list")
        people = jsonDictionary.json(atKeyPath: "people")
        text = jsonDictionary.json(atKeyPath: "text")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        dictionary["id"] = id
        dictionary["type"] = type.encode()
        dictionary["title"] = title
        dictionary["template"] = template
        if let customFields = customFields {
            dictionary["customFields"] = customFields
        }
        if let images = images?.encode() {
            dictionary["images"] = images
        }
        if let item = item?.encode() {
            dictionary["item"] = item
        }
        if let list = list?.encode() {
            dictionary["list"] = list
        }
        if let people = people?.encode() {
            dictionary["people"] = people
        }
        if let text = text {
            dictionary["text"] = text
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
