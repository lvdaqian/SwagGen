//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class SearchResults: JSONDecodable, JSONEncodable, PrettyPrintable {

    /** The search term. */
    public var term: String

    /** The total number of results. */
    public var total: Int

    /** The list of all items relevant to the search term.

If this is present then the `movies` and `tv` lists won't be.
 */
    public var items: ItemList?

    /** The list of movie items relevant to the search term.

If this is present then the `items` list won't be.
 */
    public var movies: ItemList?

    /** The list of people relevant to the search term. */
    public var people: [Person]?

    /** The list of tv items (shows + programs) relevant to the search term.

If this is present then the `items` list won't be.
 */
    public var tv: ItemList?

    public init(term: String, total: Int, items: ItemList? = nil, movies: ItemList? = nil, people: [Person]? = nil, tv: ItemList? = nil) {
        self.term = term
        self.total = total
        self.items = items
        self.movies = movies
        self.people = people
        self.tv = tv
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        term = try jsonDictionary.json(atKeyPath: "term")
        total = try jsonDictionary.json(atKeyPath: "total")
        items = jsonDictionary.json(atKeyPath: "items")
        movies = jsonDictionary.json(atKeyPath: "movies")
        people = jsonDictionary.json(atKeyPath: "people")
        tv = jsonDictionary.json(atKeyPath: "tv")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        dictionary["term"] = term
        dictionary["total"] = total
        if let items = items?.encode() {
            dictionary["items"] = items
        }
        if let movies = movies?.encode() {
            dictionary["movies"] = movies
        }
        if let people = people?.encode() {
            dictionary["people"] = people
        }
        if let tv = tv?.encode() {
            dictionary["tv"] = tv
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
