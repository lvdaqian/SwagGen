//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

/** Defines playback exclusion rules for an Offer or Entitlement. */
public class ExclusionRule: JSONDecodable, JSONEncodable, PrettyPrintable {

    /** Defines playback exclusion rules for an Offer or Entitlement. */
    public enum ExcludeDelivery: String {
        case stream = "Stream"
        case download = "Download"
        case streamOrDownload = "StreamOrDownload"
        case progressiveDownload = "ProgressiveDownload"
        case none = "None"

        public static let cases: [ExcludeDelivery] = [
          .stream,
          .download,
          .streamOrDownload,
          .progressiveDownload,
          .none,
        ]
    }

    /** Defines playback exclusion rules for an Offer or Entitlement. */
    public enum ExcludeMinResolution: String {
        case sd = "SD"
        case hd720 = "HD-720"
        case hd1080 = "HD-1080"
        case unknown = "Unknown"

        public static let cases: [ExcludeMinResolution] = [
          .sd,
          .hd720,
          .hd1080,
          .unknown,
        ]
    }

    public var description: String?

    /** The device type that the exclusion rules apply to. */
    public var device: String?

    /** Prevent airplay from an apple device. */
    public var excludeAirplay: Bool?

    /** Prevent chromecasting. */
    public var excludeChromecast: Bool?

    public var excludeDelivery: ExcludeDelivery?

    public var excludeMinResolution: ExcludeMinResolution?

    public init(description: String? = nil, device: String? = nil, excludeAirplay: Bool? = nil, excludeChromecast: Bool? = nil, excludeDelivery: ExcludeDelivery? = nil, excludeMinResolution: ExcludeMinResolution? = nil) {
        self.description = description
        self.device = device
        self.excludeAirplay = excludeAirplay
        self.excludeChromecast = excludeChromecast
        self.excludeDelivery = excludeDelivery
        self.excludeMinResolution = excludeMinResolution
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        description = jsonDictionary.json(atKeyPath: "description")
        device = jsonDictionary.json(atKeyPath: "device")
        excludeAirplay = jsonDictionary.json(atKeyPath: "excludeAirplay")
        excludeChromecast = jsonDictionary.json(atKeyPath: "excludeChromecast")
        excludeDelivery = jsonDictionary.json(atKeyPath: "excludeDelivery")
        excludeMinResolution = jsonDictionary.json(atKeyPath: "excludeMinResolution")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        if let description = description {
            dictionary["description"] = description
        }
        if let device = device {
            dictionary["device"] = device
        }
        if let excludeAirplay = excludeAirplay {
            dictionary["excludeAirplay"] = excludeAirplay
        }
        if let excludeChromecast = excludeChromecast {
            dictionary["excludeChromecast"] = excludeChromecast
        }
        if let excludeDelivery = excludeDelivery?.encode() {
            dictionary["excludeDelivery"] = excludeDelivery
        }
        if let excludeMinResolution = excludeMinResolution?.encode() {
            dictionary["excludeMinResolution"] = excludeMinResolution
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
