//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class Account: JSONDecodable, JSONEncodable, PrettyPrintable {

    /** The id of the account. */
    public var id: String

    /** The email address belonging to the account. */
    public var email: String

    /** Whether usage tracking is associated with the account or anonymous. */
    public var trackingEnabled: Bool

    /** When an account level pin is defined this will be true. */
    public var pinEnabled: Bool

    /** Whether the account has opted in or out of marketing material. */
    public var marketingEnabled: Bool

    /** The id of the primary profile. */
    public var primaryProfileId: String

    /** The active subscription code for an account.

The value of this should be passed to any endpoints accepting a `sub` query parameter.
 */
    public var subscriptionCode: String

    /** The list of profiles under this account. */
    public var profiles: [ProfileSummary]

    /** The id of the payment instrument to use by default for account transactions. */
    public var defaultPaymentInstrumentId: String?

    /** The list of entitlements to playback specific items. */
    public var entitlements: [Entitlement]?

    /** The first name of the account holder. */
    public var firstName: String?

    /** The last name of the account holder. */
    public var lastName: String?

    /** The classification rating defining the minimum rating level a user should be
forced to enter the account pin code for playback. Anything at this rating
level or above will require the pin for playback.

e.g. AUOFLC-MA15+

If you want to disable this guard pass an empty string or `null`.
 */
    public var minRatingPlaybackGuard: String?

    /** The list of subscriptions, if any, the account has signed up to. */
    public var subscriptions: [Subscription]?

    /** Whether the account has used up their free trial period of a plan. */
    public var usedFreeTrial: Bool?

    public init(id: String, email: String, trackingEnabled: Bool, pinEnabled: Bool, marketingEnabled: Bool, primaryProfileId: String, subscriptionCode: String, profiles: [ProfileSummary], defaultPaymentInstrumentId: String? = nil, entitlements: [Entitlement]? = nil, firstName: String? = nil, lastName: String? = nil, minRatingPlaybackGuard: String? = nil, subscriptions: [Subscription]? = nil, usedFreeTrial: Bool? = nil) {
        self.id = id
        self.email = email
        self.trackingEnabled = trackingEnabled
        self.pinEnabled = pinEnabled
        self.marketingEnabled = marketingEnabled
        self.primaryProfileId = primaryProfileId
        self.subscriptionCode = subscriptionCode
        self.profiles = profiles
        self.defaultPaymentInstrumentId = defaultPaymentInstrumentId
        self.entitlements = entitlements
        self.firstName = firstName
        self.lastName = lastName
        self.minRatingPlaybackGuard = minRatingPlaybackGuard
        self.subscriptions = subscriptions
        self.usedFreeTrial = usedFreeTrial
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        id = try jsonDictionary.json(atKeyPath: "id")
        email = try jsonDictionary.json(atKeyPath: "email")
        trackingEnabled = try jsonDictionary.json(atKeyPath: "trackingEnabled")
        pinEnabled = try jsonDictionary.json(atKeyPath: "pinEnabled")
        marketingEnabled = try jsonDictionary.json(atKeyPath: "marketingEnabled")
        primaryProfileId = try jsonDictionary.json(atKeyPath: "primaryProfileId")
        subscriptionCode = try jsonDictionary.json(atKeyPath: "subscriptionCode")
        profiles = try jsonDictionary.json(atKeyPath: "profiles")
        defaultPaymentInstrumentId = jsonDictionary.json(atKeyPath: "defaultPaymentInstrumentId")
        entitlements = jsonDictionary.json(atKeyPath: "entitlements")
        firstName = jsonDictionary.json(atKeyPath: "firstName")
        lastName = jsonDictionary.json(atKeyPath: "lastName")
        minRatingPlaybackGuard = jsonDictionary.json(atKeyPath: "minRatingPlaybackGuard")
        subscriptions = jsonDictionary.json(atKeyPath: "subscriptions")
        usedFreeTrial = jsonDictionary.json(atKeyPath: "usedFreeTrial")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        dictionary["id"] = id
        dictionary["email"] = email
        dictionary["trackingEnabled"] = trackingEnabled
        dictionary["pinEnabled"] = pinEnabled
        dictionary["marketingEnabled"] = marketingEnabled
        dictionary["primaryProfileId"] = primaryProfileId
        dictionary["subscriptionCode"] = subscriptionCode
        dictionary["profiles"] = profiles.encode()
        if let defaultPaymentInstrumentId = defaultPaymentInstrumentId {
            dictionary["defaultPaymentInstrumentId"] = defaultPaymentInstrumentId
        }
        if let entitlements = entitlements?.encode() {
            dictionary["entitlements"] = entitlements
        }
        if let firstName = firstName {
            dictionary["firstName"] = firstName
        }
        if let lastName = lastName {
            dictionary["lastName"] = lastName
        }
        if let minRatingPlaybackGuard = minRatingPlaybackGuard {
            dictionary["minRatingPlaybackGuard"] = minRatingPlaybackGuard
        }
        if let subscriptions = subscriptions?.encode() {
            dictionary["subscriptions"] = subscriptions
        }
        if let usedFreeTrial = usedFreeTrial {
            dictionary["usedFreeTrial"] = usedFreeTrial
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
