//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class MediaFile: JSONDecodable, JSONEncodable, PrettyPrintable {

    /** The way in which the media file is delivered. */
    public enum DeliveryType: String {
        case stream = "Stream"
        case progressive = "Progressive"
        case download = "Download"

        public static let cases: [DeliveryType] = [
          .stream,
          .progressive,
          .download,
        ]
    }

    /** The resolution of the video media. */
    public enum Resolution: String {
        case sd = "SD"
        case hd720 = "HD-720"
        case hd1080 = "HD-1080"
        case unknown = "Unknown"

        public static let cases: [Resolution] = [
          .sd,
          .hd720,
          .hd1080,
          .unknown,
        ]
    }

    /** The name of the media file. */
    public var name: String

    /** The way in which the media file is delivered. */
    public var deliveryType: DeliveryType

    /** The url to access the media file. */
    public var url: URL

    /** The type of drm used to encrypt the media. 'None' if unencrypted. */
    public var drm: String

    /** The format the media was encoded in. */
    public var format: String

    /** The resolution of the video media. */
    public var resolution: Resolution

    /** The width of the video media. */
    public var width: Int

    /** The height of the video media. */
    public var height: Int

    /** The language code for the media, e.g. 'en'. */
    public var language: String

    /** The number of audio channels. */
    public var channels: Int?

    public init(name: String, deliveryType: DeliveryType, url: URL, drm: String, format: String, resolution: Resolution, width: Int, height: Int, language: String, channels: Int? = nil) {
        self.name = name
        self.deliveryType = deliveryType
        self.url = url
        self.drm = drm
        self.format = format
        self.resolution = resolution
        self.width = width
        self.height = height
        self.language = language
        self.channels = channels
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        name = try jsonDictionary.json(atKeyPath: "name")
        deliveryType = try jsonDictionary.json(atKeyPath: "deliveryType")
        url = try jsonDictionary.json(atKeyPath: "url")
        drm = try jsonDictionary.json(atKeyPath: "drm")
        format = try jsonDictionary.json(atKeyPath: "format")
        resolution = try jsonDictionary.json(atKeyPath: "resolution")
        width = try jsonDictionary.json(atKeyPath: "width")
        height = try jsonDictionary.json(atKeyPath: "height")
        language = try jsonDictionary.json(atKeyPath: "language")
        channels = jsonDictionary.json(atKeyPath: "channels")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        dictionary["name"] = name
        dictionary["deliveryType"] = deliveryType.encode()
        dictionary["url"] = url.encode()
        dictionary["drm"] = drm
        dictionary["format"] = format
        dictionary["resolution"] = resolution.encode()
        dictionary["width"] = width
        dictionary["height"] = height
        dictionary["language"] = language
        if let channels = channels {
            dictionary["channels"] = channels
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
