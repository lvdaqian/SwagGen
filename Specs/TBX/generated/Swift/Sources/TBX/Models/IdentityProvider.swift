//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class IdentityProvider: JSONDecodable, JSONEncodable, PrettyPrintable {

    public var description: String

    public var shortName: String

    public var apiKey: String

    public var clientType: String

    public var devicesLimit: Double

    public var active: Bool

    public var canCreateToken: Bool

    public var canCreateDevice: Bool

    public var conector: String?

    public var haveMultipleURNService: Bool?

    public var id: ObjectID?

    public var maintenance: Bool?

    public var oauth2: [String: Any]?

    public var saml: [String: Any]?

    public var sendRequestorAuthZ: Bool?

    public var subscriberIdData: String?

    public var whitelistDomains: [String]?

    public var wsAPIKey: String?

    public var wsMaintenance: Bool?

    public var wsMaintenanceCountry: [String]?

    public var wsNameSpace: String?

    public var wsURL: String?

    public init(description: String, shortName: String, apiKey: String, clientType: String, devicesLimit: Double, active: Bool, canCreateToken: Bool, canCreateDevice: Bool, conector: String? = nil, haveMultipleURNService: Bool? = nil, id: ObjectID? = nil, maintenance: Bool? = nil, oauth2: [String: Any]? = nil, saml: [String: Any]? = nil, sendRequestorAuthZ: Bool? = nil, subscriberIdData: String? = nil, whitelistDomains: [String]? = nil, wsAPIKey: String? = nil, wsMaintenance: Bool? = nil, wsMaintenanceCountry: [String]? = nil, wsNameSpace: String? = nil, wsURL: String? = nil) {
        self.description = description
        self.shortName = shortName
        self.apiKey = apiKey
        self.clientType = clientType
        self.devicesLimit = devicesLimit
        self.active = active
        self.canCreateToken = canCreateToken
        self.canCreateDevice = canCreateDevice
        self.conector = conector
        self.haveMultipleURNService = haveMultipleURNService
        self.id = id
        self.maintenance = maintenance
        self.oauth2 = oauth2
        self.saml = saml
        self.sendRequestorAuthZ = sendRequestorAuthZ
        self.subscriberIdData = subscriberIdData
        self.whitelistDomains = whitelistDomains
        self.wsAPIKey = wsAPIKey
        self.wsMaintenance = wsMaintenance
        self.wsMaintenanceCountry = wsMaintenanceCountry
        self.wsNameSpace = wsNameSpace
        self.wsURL = wsURL
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        description = try jsonDictionary.json(atKeyPath: "description")
        shortName = try jsonDictionary.json(atKeyPath: "shortName")
        apiKey = try jsonDictionary.json(atKeyPath: "apiKey")
        clientType = try jsonDictionary.json(atKeyPath: "clientType")
        devicesLimit = try jsonDictionary.json(atKeyPath: "devicesLimit")
        active = try jsonDictionary.json(atKeyPath: "active")
        canCreateToken = try jsonDictionary.json(atKeyPath: "canCreateToken")
        canCreateDevice = try jsonDictionary.json(atKeyPath: "canCreateDevice")
        conector = jsonDictionary.json(atKeyPath: "conector")
        haveMultipleURNService = jsonDictionary.json(atKeyPath: "haveMultipleURNService")
        id = jsonDictionary.json(atKeyPath: "id")
        maintenance = jsonDictionary.json(atKeyPath: "maintenance")
        oauth2 = jsonDictionary.json(atKeyPath: "oauth2")
        saml = jsonDictionary.json(atKeyPath: "saml")
        sendRequestorAuthZ = jsonDictionary.json(atKeyPath: "sendRequestorAuthZ")
        subscriberIdData = jsonDictionary.json(atKeyPath: "subscriberIdData")
        whitelistDomains = jsonDictionary.json(atKeyPath: "whitelistDomains")
        wsAPIKey = jsonDictionary.json(atKeyPath: "wsAPIKey")
        wsMaintenance = jsonDictionary.json(atKeyPath: "wsMaintenance")
        wsMaintenanceCountry = jsonDictionary.json(atKeyPath: "wsMaintenanceCountry")
        wsNameSpace = jsonDictionary.json(atKeyPath: "wsNameSpace")
        wsURL = jsonDictionary.json(atKeyPath: "wsURL")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        dictionary["description"] = description
        dictionary["shortName"] = shortName
        dictionary["apiKey"] = apiKey
        dictionary["clientType"] = clientType
        dictionary["devicesLimit"] = devicesLimit
        dictionary["active"] = active
        dictionary["canCreateToken"] = canCreateToken
        dictionary["canCreateDevice"] = canCreateDevice
        if let conector = conector {
            dictionary["conector"] = conector
        }
        if let haveMultipleURNService = haveMultipleURNService {
            dictionary["haveMultipleURNService"] = haveMultipleURNService
        }
        if let id = id?.encode() {
            dictionary["id"] = id
        }
        if let maintenance = maintenance {
            dictionary["maintenance"] = maintenance
        }
        if let oauth2 = oauth2 {
            dictionary["oauth2"] = oauth2
        }
        if let saml = saml {
            dictionary["saml"] = saml
        }
        if let sendRequestorAuthZ = sendRequestorAuthZ {
            dictionary["sendRequestorAuthZ"] = sendRequestorAuthZ
        }
        if let subscriberIdData = subscriberIdData {
            dictionary["subscriberIdData"] = subscriberIdData
        }
        if let whitelistDomains = whitelistDomains {
            dictionary["whitelistDomains"] = whitelistDomains
        }
        if let wsAPIKey = wsAPIKey {
            dictionary["wsAPIKey"] = wsAPIKey
        }
        if let wsMaintenance = wsMaintenance {
            dictionary["wsMaintenance"] = wsMaintenance
        }
        if let wsMaintenanceCountry = wsMaintenanceCountry {
            dictionary["wsMaintenanceCountry"] = wsMaintenanceCountry
        }
        if let wsNameSpace = wsNameSpace {
            dictionary["wsNameSpace"] = wsNameSpace
        }
        if let wsURL = wsURL {
            dictionary["wsURL"] = wsURL
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
