//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class ContentProvider: JSONDecodable, JSONEncodable, PrettyPrintable {

    public var description: String

    public var shortName: String

    public var active: Bool

    public var apiKey: String

    public var devicesLimit: Double

    public var canLogoutDevice: Bool

    public var canCreateTryAndBuy: Bool?

    public var hasSocialID: Bool?

    public var id: ObjectID?

    public var overrideRules: [OverrideRuleObject]?

    public var permittedURN: [String]?

    public var urlMaintenance: String?

    public var whitelistDomains: [String]?

    public init(description: String, shortName: String, active: Bool, apiKey: String, devicesLimit: Double, canLogoutDevice: Bool, canCreateTryAndBuy: Bool? = nil, hasSocialID: Bool? = nil, id: ObjectID? = nil, overrideRules: [OverrideRuleObject]? = nil, permittedURN: [String]? = nil, urlMaintenance: String? = nil, whitelistDomains: [String]? = nil) {
        self.description = description
        self.shortName = shortName
        self.active = active
        self.apiKey = apiKey
        self.devicesLimit = devicesLimit
        self.canLogoutDevice = canLogoutDevice
        self.canCreateTryAndBuy = canCreateTryAndBuy
        self.hasSocialID = hasSocialID
        self.id = id
        self.overrideRules = overrideRules
        self.permittedURN = permittedURN
        self.urlMaintenance = urlMaintenance
        self.whitelistDomains = whitelistDomains
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        description = try jsonDictionary.json(atKeyPath: "description")
        shortName = try jsonDictionary.json(atKeyPath: "shortName")
        active = try jsonDictionary.json(atKeyPath: "active")
        apiKey = try jsonDictionary.json(atKeyPath: "apiKey")
        devicesLimit = try jsonDictionary.json(atKeyPath: "devicesLimit")
        canLogoutDevice = try jsonDictionary.json(atKeyPath: "canLogoutDevice")
        canCreateTryAndBuy = jsonDictionary.json(atKeyPath: "canCreateTryAndBuy")
        hasSocialID = jsonDictionary.json(atKeyPath: "hasSocialID")
        id = jsonDictionary.json(atKeyPath: "id")
        overrideRules = jsonDictionary.json(atKeyPath: "overrideRules")
        permittedURN = jsonDictionary.json(atKeyPath: "permittedURN")
        urlMaintenance = jsonDictionary.json(atKeyPath: "urlMaintenance")
        whitelistDomains = jsonDictionary.json(atKeyPath: "whitelistDomains")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        dictionary["description"] = description
        dictionary["shortName"] = shortName
        dictionary["active"] = active
        dictionary["apiKey"] = apiKey
        dictionary["devicesLimit"] = devicesLimit
        dictionary["canLogoutDevice"] = canLogoutDevice
        if let canCreateTryAndBuy = canCreateTryAndBuy {
            dictionary["canCreateTryAndBuy"] = canCreateTryAndBuy
        }
        if let hasSocialID = hasSocialID {
            dictionary["hasSocialID"] = hasSocialID
        }
        if let id = id?.encode() {
            dictionary["id"] = id
        }
        if let overrideRules = overrideRules?.encode() {
            dictionary["overrideRules"] = overrideRules
        }
        if let permittedURN = permittedURN {
            dictionary["permittedURN"] = permittedURN
        }
        if let urlMaintenance = urlMaintenance {
            dictionary["urlMaintenance"] = urlMaintenance
        }
        if let whitelistDomains = whitelistDomains {
            dictionary["whitelistDomains"] = whitelistDomains
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
