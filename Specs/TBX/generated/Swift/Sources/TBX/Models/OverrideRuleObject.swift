//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class OverrideRuleObject: JSONDecodable, JSONEncodable, PrettyPrintable {

    /** List of URNs to override */
    public var urn: [String]

    public var response: Bool

    public var priority: Double

    /** List of actions to override */
    public var action: [String]?

    /** List of countries to override */
    public var country: [String]?

    public var dateFrom: Date?

    public var dateUntil: Date?

    /** List of IDPs to override */
    public var idp: [String]?

    public init(urn: [String], response: Bool, priority: Double, action: [String]? = nil, country: [String]? = nil, dateFrom: Date? = nil, dateUntil: Date? = nil, idp: [String]? = nil) {
        self.urn = urn
        self.response = response
        self.priority = priority
        self.action = action
        self.country = country
        self.dateFrom = dateFrom
        self.dateUntil = dateUntil
        self.idp = idp
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        urn = try jsonDictionary.json(atKeyPath: "urn")
        response = try jsonDictionary.json(atKeyPath: "response")
        priority = try jsonDictionary.json(atKeyPath: "priority")
        action = jsonDictionary.json(atKeyPath: "action")
        country = jsonDictionary.json(atKeyPath: "country")
        dateFrom = jsonDictionary.json(atKeyPath: "dateFrom")
        dateUntil = jsonDictionary.json(atKeyPath: "dateUntil")
        idp = jsonDictionary.json(atKeyPath: "idp")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        dictionary["urn"] = urn
        dictionary["response"] = response
        dictionary["priority"] = priority
        if let action = action {
            dictionary["action"] = action
        }
        if let country = country {
            dictionary["country"] = country
        }
        if let dateFrom = dateFrom?.encode() {
            dictionary["dateFrom"] = dateFrom
        }
        if let dateUntil = dateUntil?.encode() {
            dictionary["dateUntil"] = dateUntil
        }
        if let idp = idp {
            dictionary["idp"] = idp
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
