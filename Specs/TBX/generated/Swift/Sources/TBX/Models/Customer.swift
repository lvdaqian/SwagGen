//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class Customer: JSONDecodable, JSONEncodable, PrettyPrintable {

    public var subscriberID: String

    public var banReason: String?

    public var banned: Bool?

    public var country: ObjectID?

    public var created: Date?

    public var hasNotDeviceLimit: Bool?

    public var id: ObjectID?

    public var identityProvider: ObjectID?

    public var lastLogin: Date?

    public var updated: Date?

    public init(subscriberID: String, banReason: String? = nil, banned: Bool? = nil, country: ObjectID? = nil, created: Date? = nil, hasNotDeviceLimit: Bool? = nil, id: ObjectID? = nil, identityProvider: ObjectID? = nil, lastLogin: Date? = nil, updated: Date? = nil) {
        self.subscriberID = subscriberID
        self.banReason = banReason
        self.banned = banned
        self.country = country
        self.created = created
        self.hasNotDeviceLimit = hasNotDeviceLimit
        self.id = id
        self.identityProvider = identityProvider
        self.lastLogin = lastLogin
        self.updated = updated
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        subscriberID = try jsonDictionary.json(atKeyPath: "subscriberID")
        banReason = jsonDictionary.json(atKeyPath: "banReason")
        banned = jsonDictionary.json(atKeyPath: "banned")
        country = jsonDictionary.json(atKeyPath: "country")
        created = jsonDictionary.json(atKeyPath: "created")
        hasNotDeviceLimit = jsonDictionary.json(atKeyPath: "hasNotDeviceLimit")
        id = jsonDictionary.json(atKeyPath: "id")
        identityProvider = jsonDictionary.json(atKeyPath: "identityProvider")
        lastLogin = jsonDictionary.json(atKeyPath: "lastLogin")
        updated = jsonDictionary.json(atKeyPath: "updated")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        dictionary["subscriberID"] = subscriberID
        if let banReason = banReason {
            dictionary["banReason"] = banReason
        }
        if let banned = banned {
            dictionary["banned"] = banned
        }
        if let country = country?.encode() {
            dictionary["country"] = country
        }
        if let created = created?.encode() {
            dictionary["created"] = created
        }
        if let hasNotDeviceLimit = hasNotDeviceLimit {
            dictionary["hasNotDeviceLimit"] = hasNotDeviceLimit
        }
        if let id = id?.encode() {
            dictionary["id"] = id
        }
        if let identityProvider = identityProvider?.encode() {
            dictionary["identityProvider"] = identityProvider
        }
        if let lastLogin = lastLogin?.encode() {
            dictionary["lastLogin"] = lastLogin
        }
        if let updated = updated?.encode() {
            dictionary["updated"] = updated
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
