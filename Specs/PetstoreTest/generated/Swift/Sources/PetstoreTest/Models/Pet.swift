//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class Pet: JSONDecodable, JSONEncodable, PrettyPrintable {

    /** pet status in the store */
    public enum Status: String {
        case available = "available"
        case pending = "pending"
        case sold = "sold"

        public static let cases: [Status] = [
          .available,
          .pending,
          .sold,
        ]
    }

    public var name: String

    public var photoUrls: [String]

    public var category: Category?

    public var id: Int?

    /** pet status in the store */
    public var status: Status?

    public var tags: [Tag]?

    public init(name: String, photoUrls: [String], category: Category? = nil, id: Int? = nil, status: Status? = nil, tags: [Tag]? = nil) {
        self.name = name
        self.photoUrls = photoUrls
        self.category = category
        self.id = id
        self.status = status
        self.tags = tags
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        name = try jsonDictionary.json(atKeyPath: "name")
        photoUrls = try jsonDictionary.json(atKeyPath: "photoUrls")
        category = jsonDictionary.json(atKeyPath: "category")
        id = jsonDictionary.json(atKeyPath: "id")
        status = jsonDictionary.json(atKeyPath: "status")
        tags = jsonDictionary.json(atKeyPath: "tags")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        dictionary["name"] = name
        dictionary["photoUrls"] = photoUrls
        if let category = category?.encode() {
            dictionary["category"] = category
        }
        if let id = id {
            dictionary["id"] = id
        }
        if let status = status?.encode() {
            dictionary["status"] = status
        }
        if let tags = tags?.encode() {
            dictionary["tags"] = tags
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
